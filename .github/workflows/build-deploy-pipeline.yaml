name: Java Maven CI/CD Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:
    
jobs:
  unit-testing:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
       
      - name: Run unit tests
        run: mvn test
        
      - name: Upload unit test results
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-results
          path: target/surefire-reports

  build-artifact:
    runs-on: ubuntu-latest
    needs: unit-testing
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "eu-north-1"

      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & Push Docker image to ECR
        id: build
        env:
          ACCOUNT_ID: 099199746132
          REGION: "eu-north-1"
          IMAGE: "digitify-application"
          TAG : ${{ github.sha }}
        run: |
          mvn package
          echo "docker building image"
          docker build -t 099199746132.dkr.ecr.eu-north-1.amazonaws.com/digitify-application:${TAG} .
          echo "pushing docker image"
          docker push 099199746132.dkr.ecr.eu-north-1.amazonaws.com/digitify-application:${TAG}
          echo "docker image pushed to ecr successfully"
          echo "image_tag=${TAG}" >> $GITHUB_OUTPUT

      - name: Update Image Tag in Helm Value File
        env: 
          ACCOUNT_ID: 099199746132
          REGION: "eu-north-1"
        run: |
            export TAG="${{ steps.build.outputs.image_tag }}"
            sed -i '/^  tag:/s/: .*/: '"$TAG"'/' helm/values.yaml
            git config --global user.name "github-actions[bot]"
            git config --global user.email "github-actions[bot]@users.noreply.github.com"
            git add helm/values.yaml
            git commit -m "Update image tag to $TAG"
            git push origin main

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-artifact
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "eu-north-1"

      - name: Set up Helm
        uses: azure/setup-helm@v4

      - name: Run deploy script
        env:
          AWS_REGION: "eu-north-1"
          EKS_CLUSTER_NAME: "mohsin-eks-cluster"
          RELEASE_NAME: "digitify-application-staging"
        run: |
         chmod +x ./deploy.sh
         ./deploy.sh

  # deploy_production:
  #   needs: [ci, deploy_staging]
  #   runs-on: ubuntu-latest
  #   environment: production

  #   steps:
  #     - name: Manual Approval
  #       uses: hmarr/auto-approve-action@v2.1.0
  #       with:
  #         approve: true

  #     - name: Checkout code
  #       uses: actions/checkout@v4
        
        # - name: Manual Approval
        # if: always()
        # uses: chrnorm/deploy-approval-action@v1
        # with:
        #   approvers: user1, user2  # Replace with actual GitHub usernames
        #   environment: production

  #     - name: Deploy to Production
  #       run: |
  #         # Commands to deploy to your production environment
  #         # For example, using kubectl, terraform, or any other tool
  #         echo "Deploying to production environment"


      # Add steps for deployment
      # Example: Deploying to ECS or another service using the pushed Docker image
      # You may use aws-actions/amazon-ecs-deploy-task-definition@v1 or another deployment action
